version: "3.5"

services:

  tempo:
    image: grafana/tempo
    hostname: tempo-sb3
    container_name: tempo-sb3
    command: [ "-config.file=/etc/tempo.yaml" ]
    networks:
      - sb3
    volumes:
      - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - ./tempo-data:/tmp/tempo
    ports:
      # export only the UI
      - "3200:3200" # grafana and admin API
      - "54317:4317" # OTLP gRPC receiver
      - "54318:4318" # OTLP http receiver
#
#  loki:
#    image: grafana/loki
#    hostname: loki-sb3
#    container_name: loki-sb3
#    command: [ "-config.file=/etc/loki/local-config.yaml" ]
#    networks:
#      - sb3
#    ports:
#      - "3100:3100" # log ingest

#  otel-collector:
#    image: otel/opentelemetry-collector-contrib
#    hostname: otel-sb3
#    container_name: otel-sb3
#    command: [ "--config=/etc/otel-collector.yaml" ]
#    volumes:
#      - ./docker/otel/otel-collector.yaml:/etc/otel-collector.yaml
#    ports:
#      - "13133:13133" # health check under /health/status
#      - "13888:8888" # prometheus metrics under /metrics
#      # for testing apps running in the host, we expose otlp ingest ports to the host
#      - "4317:4317" # OTLP gRPC receiver
#      - "4318:4318" # OTLP http receiver

  minio:
    image: minio/minio
    entrypoint: [ "" ]
    command: [ "sh", "-c", "mkdir -p /data/mimir && minio server --quiet /data" ]
    hostname: minio-sb3
    container_name: minio-sb3
    environment:
      - MINIO_ROOT_USER=mimir
      - MINIO_ROOT_PASSWORD=supersecret
    volumes:
      - ./docker/minio/data:/data

  mimir:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-sb3
    container_name: mimir-sb3
    depends_on:
      - minio
    volumes:
      - ./docker/mimir/mimir.yaml:/etc/mimir.yaml
      - ./docker/mimir/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - ./docker/mimir/data:/data

  grafana:
    image: grafana/grafana:latest
    hostname: grafana-sb3
    container_name: grafana-sb3
    networks:
      - sb3
    volumes:
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:rw
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:rw
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_USERS_DEFAULT_THEME=light
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=critical
    ports:
      - "3000:3000"

#  demo1:
#    image: spring-boot3-demo
#    hostname: demo1-sb3
#    container_name: demo1-sb3
#    command: [ "-javaagent:/tmp/opentelemetry-javaagent.jar -Dotel.resource.attributes=service.name=demo1-sb3" ]
#    networks:
#      - sb3
#    volumes:
#      - ./opentelemetry-javaagent.jar:/tmp/opentelemetry-javaagent.jar:ro
#    ports:
#      - "8080:8080"
#    environment:
#      - SPRING_APPLICATION_NAME=demo1 # the name is shown in the log
#      - SPRING_PROFILES_ACTIVE=setup2
#      - APPLICATION_CLIENT_HOST=demo2-sb3
#      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-sb3:4317 # OTLP Collector's GRPC endpoint
#      - OTEL_METRICS_EXPORTER=otlp
#      - OTEL_TRACES_EXPORTER=otlp
#      - OTEL_LOGS_EXPORTER=otlp
#
#  demo2:
#    image: spring-boot3-demo
#    hostname: demo2-sb3
#    container_name: demo2-sb3
#    command: [ "-javaagent:/tmp/opentelemetry-javaagent.jar -Dotel.resource.attributes=service.name=demo2-sb3" ]
#    networks:
#      - sb3
#    volumes:
#      - ./opentelemetry-javaagent.jar:/tmp/opentelemetry-javaagent.jar:ro
#    ports:
#      - "8081:8080"
#    environment:
#      - SPRING_APPLICATION_NAME=demo2 # the name is shown in the log
#      - SPRING_PROFILES_ACTIVE=setup2
#      - APPLICATION_CLIENT_HOST=demo1-sb3
#      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-sb3:4317 # OTLP Collector's GRPC endpoint
#      - OTEL_METRICS_EXPORTER=otlp
#      - OTEL_TRACES_EXPORTER=otlp
#      - OTEL_LOGS_EXPORTER=otlp

networks:
  sb3:
